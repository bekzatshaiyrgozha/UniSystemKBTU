package DLL;
import java.io.File;
import java.util.*; 
import Users.*;
import Utils.News; 
import Utils.Course;
import Utils.Register; // Импортируем класс Register, который будет использоваться для регистраций.

public class DBContext {
    
    private static String fullPath = "/home/xan001/UniSystemKBTU/UniversitySystem/src/Data/"; 
    private static DBContext db = new DBContext();
    
    public static Vector<Teacher> teacher;
    public static Vector<Student> student;
    public static Vector<Manager> manager; 
    public static Vector<News> newsList; 
    public static Vector<Course> courseList;
    public static Vector<Register> registerList; // Добавляем поле для регистраций

    {
        this.teacher = getTeachers();
        this.student = getStudents(); 
        this.manager = getManagers(); 
        this.newsList = getNews(); 
        this.courseList = getCourse();
        this.registerList = getRegistrations(); // Инициализация списка регистраций
    }
    
    private DBContext() {
    }
    
    // Метод для получения списка студентов
    public static Vector<Student> getStudents(){
        String filePath = fullPath + "students.txt"; 
        File file = new File(filePath); 
        
        if(!file.exists() || file.length() == 0) {
            System.out.println("File is empty or does not exist , returning an empty list."); 
            return new Vector<>();
        }
        Object o = ReaderWriter.deserialize(filePath); 
        if(o instanceof Vector) {
            return (Vector<Student>) o; 
        }
        return new Vector<>(); 
    }

    // Метод для получения списка преподавателей
    public static Vector<Teacher> getTeachers() {
        String filePath = fullPath + "teachers.txt";
        File file = new File(filePath);

        if (!file.exists() || file.length() == 0) {
            System.out.println("File is empty or does not exist, returning an empty list.");
            return new Vector<>();
        }
        Object o = ReaderWriter.deserialize(filePath);

        if (o instanceof Vector) {
            return (Vector<Teacher>) o;
        }
        return new Vector<>();
    }

    // Метод для получения списка менеджеров
    public static Vector<Manager> getManagers(){
        String filePath = fullPath + "manager.txt"; 
        File file = new File(filePath);
        if (!file.exists() || file.length() == 0) {
            System.out.println("File is empty or does not exist, returning an empty list.");
            return new Vector<>();
        }

        Object o = ReaderWriter.deserialize(filePath);

        if (o instanceof Vector) {
            return (Vector<Manager>) o;
        }
        return new Vector<>();
    }

    // Метод для получения списка новостей
    public static Vector<News> getNews() {
        String filePath = fullPath + "news.txt";
        File file = new File(filePath);

        if (!file.exists() || file.length() == 0) {
            System.out.println("File is empty or does not exist, returning an empty list.");
            return new Vector<>();
        }
        Object o = ReaderWriter.deserialize(filePath);
        if (o instanceof Vector) {
            return (Vector<News>) o;
        }
        return new Vector<>();
    }

    // Метод для получения списка курсов
    public static Vector<Course> getCourse() {
        String filePath = fullPath + "course.txt";
        File file = new File(filePath);

        if (!file.exists() || file.length() == 0) {
            System.out.println("File is empty or does not exist, returning an empty list.");
            return new Vector<>();
        }
        Object o = ReaderWriter.deserialize(filePath);
        if (o instanceof Vector) {
            return (Vector<Course>) o;
        }
        return new Vector<>();
    }

    // Метод для получения регистраций
    public static Vector<Register> getRegistrations() {
        String filePath = fullPath + "register.txt";
        File file = new File(filePath);

        if (!file.exists() || file.length() == 0) {
            System.out.println("File is empty or does not exist, returning an empty list.");
            return new Vector<>();
        }

        Object o = ReaderWriter.deserialize(filePath);
        if (o instanceof Vector) {
            return (Vector<Register>) o;
        }
        return new Vector<>();
    }

    // Метод для сохранения преподавателей
    public static boolean saveTeachers() {
        return ReaderWriter.serialize(teacher, fullPath + "teachers.txt");
    }

    // Метод для сохранения студентов
    public static boolean saveStudents() {
        return ReaderWriter.serialize(student, fullPath + "students.txt"); 
    }

    // Метод для сохранения менеджеров
    public static boolean saveManagers() {
        return ReaderWriter.serialize(manager, fullPath + "manager.txt"); 
    }

    // Метод для сохранения новостей
    public static boolean saveNews() {
        return ReaderWriter.serialize(newsList, fullPath + "news.txt"); 
    }

    // Метод для сохранения курсов
    public static boolean saveCourse() {
        return ReaderWriter.serialize(courseList, fullPath + "course.txt");
    }

    // Метод для сохранения регистраций
    public static boolean saveRegistrations() {
        return ReaderWriter.serialize(registerList, fullPath + "register.txt");
    }

    // Метод для добавления новости
    public static void addNews(News news) {
        newsList.add(news); 
        saveNews(); 
    }

    // Метод для добавления курса
    public static void addCourse(Course course) {
        courseList.add(course); 
        saveCourse(); 
    }

    // Метод для добавления регистрации
    public static void addRegistration(Register register) {
        registerList.add(register); 
        saveRegistrations(); // Сохраняем обновленный список регистраций
    }

    // Метод для получения всех пользователей
    public static Vector<User> getAllUsers() {
        Vector<User> allUsers = new Vector<>(); 
        allUsers.addAll(teacher);
        allUsers.addAll(student); 
        allUsers.addAll(manager);
        return allUsers; 
    }

    // Метод для получения всех регистраций
    public static Vector<Register> getAllRegistrations() {
        return registerList; // Возвращаем список регистраций
    }
}
