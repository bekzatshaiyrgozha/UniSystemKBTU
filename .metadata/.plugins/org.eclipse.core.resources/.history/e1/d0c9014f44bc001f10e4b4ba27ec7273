package Controllers;
import java.util.*;

import DLL.DBContext;
import Enumerations.UserType;
import Users.*;
import Utils.Course;
import Utils.News; 
public class UserController {
	public static boolean authorize(String fileName , String username , String password) {
		Vector<?> users = null ; 
		if (fileName.equals("teacher.txt")) {
            users = (Vector<Teacher>) UserController.getUsers(UserType.TEACHER);
        } else if (fileName.equals("students.txt")) {
            users = (Vector<Student>) UserController.getUsers(UserType.STUDENT);
        } else if (fileName.equals("managers.txt")) {
            users = (Vector<Manager>) UserController.getUsers(UserType.MANAGER);
        }
        if (users == null) return false;

        for (Object user : users) {
            if (user instanceof User) {
                User u = (User) user;
                if (u.getUsername().equals(username) && u.getPassword().equals(password)) {
                    return true;
                }
            }
        }

        return false;
	}
	public static Object getUsers(UserType type) {
		switch (type){
		case TEACHER:
			return DBContext.getTeachers();
		case STUDENT:
			return DBContext.getStudents();
		case MANAGER:
			return DBContext.getManagers();
		default:
			return null;

	}
	}
	public static Vector<User> getAllUsers(){
		Vector<User> allUsers = new Vector<>();
        allUsers.addAll(DBContext.getTeachers());  
        allUsers.addAll(DBContext.getStudents());  
        allUsers.addAll(DBContext.getManagers());  
        return allUsers;
	}
	public static Vector<News> getAllNews(){
		return DBContext.getDb().getNews(); 
	}
	public static Vector<Course> getAllCourses(){
		return DBContext.getDb().getCourse();
	}
	public static Student getStudentByUsername(String username) {
        Vector<Student> students = DBContext.getStudents();
        for (Student student : students) {
            if (student.getUsername().equals(username)) {
                return student;
            }
        }
        return null;  // Return null if no student is found
    }
}